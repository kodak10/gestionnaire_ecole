<?php

namespace App\Http\Controllers;

use App\Models\Eleve;
use App\Models\Classe;
use App\Models\Paiement;
use App\Models\TypeFrais;
use App\Models\MoisScolaire;
use App\Models\AnneeScolaire;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class ScolariteController extends Controller
{
    public function index()
    {
        $classes = Classe::with('niveau')->orderBy('nom')->get();
        $typesFrais = TypeFrais::orderBy('nom')->get();
        $moisScolaires = MoisScolaire::where('annee_scolaire_id', AnneeScolaire::active()->id)->get();
        $anneesScolaires = AnneeScolaire::orderBy('est_active', 'desc')->orderBy('annee', 'desc')->get();

        return view('dashboard.pages.scolarites.index', compact('classes', 'typesFrais', 'moisScolaires', 'anneesScolaires'));
    }

    public function getElevesByClasse(Request $request)
    {
        $request->validate(['classe_id' => 'required|exists:classes,id']);

        $eleves = Eleve::where('classe_id', $request->classe_id)
            
            ->with('classe')
            ->orderBy('nom')
            ->get()
            ->map(function ($eleve) {
                return [
                    'id' => $eleve->id,
                    'nom_complet' => $eleve->nom . ' ' . $eleve->prenom,
                    'matricule' => $eleve->matricule
                ];
            });

        return response()->json($eleves);
    }

    public function getElevePaiements(Request $request)
    {
        $request->validate([
            'eleve_id' => 'required|exists:eleves,id',
            'annee_scolaire_id' => 'required|exists:annee_scolaires,id'
        ]);

        try {
            $eleve = Eleve::findOrFail($request->eleve_id);
            $anneeScolaire = AnneeScolaire::findOrFail($request->annee_scolaire_id);

            // Récupérer les types de frais avec les montants et paiements
            $typesFrais = TypeFrais::with(['tarifs' => function($query) use ($eleve) {
                $query->where('niveau_id', $eleve->classe->niveau_id);
            }])->get();

            $paiementsData = [];
            $totalScolarite = 0;
            $totalPaye = 0;

            foreach ($typesFrais as $type) {
                // Pour les frais mensuels (ex: cantine, transport)
                if ($type->periodicite === 'mensuel') {
                    $mois = MoisScolaire::where('annee_scolaire_id', $anneeScolaire->id)->get();
                    
                    foreach ($mois as $moisItem) {
                        $montantTotal = $type->tarifs->first()->montant ?? 0;
                        $montantPaye = Paiement::where('eleve_id', $eleve->id)
                            ->where('type_frais_id', $type->id)
                            ->where('mois_id', $moisItem->id)
                            ->sum('montant');

                        $paiementsData[] = [
                            'type_frais_id' => $type->id,
                            'type_frais' => $type->nom . ' - ' . $moisItem->nom,
                            'mois_id' => $moisItem->id,
                            'montant_total' => $montantTotal,
                            'montant_paye' => $montantPaye,
                            'reste' => max($montantTotal - $montantPaye, 0)
                        ];

                        $totalScolarite += $montantTotal;
                        $totalPaye += $montantPaye;
                    }
                } else {
                    // Pour les frais annuels (ex: scolarité, inscription)
                    $montantTotal = $type->tarifs->first()->montant ?? 0;
                    $montantPaye = Paiement::where('eleve_id', $eleve->id)
                        ->where('type_frais_id', $type->id)
                        ->where('annee_scolaire_id', $anneeScolaire->id)
                        ->sum('montant');

                    $paiementsData[] = [
                        'type_frais_id' => $type->id,
                        'type_frais' => $type->nom,
                        'mois_id' => null,
                        'montant_total' => $montantTotal,
                        'montant_paye' => $montantPaye,
                        'reste' => max($montantTotal - $montantPaye, 0)
                    ];

                    $totalScolarite += $montantTotal;
                    $totalPaye += $montantPaye;
                }
            }

            // Appliquer la réduction si elle existe
            $reduction = $eleve->reductions()->where('annee_scolaire_id', $anneeScolaire->id)->sum('montant');
            $totalScolarite -= $reduction;

            return response()->json([
                'success' => true,
                'paiements' => $paiementsData,
                'summary' => [
                    'total_scolarite' => $totalScolarite,
                    'total_paye' => $totalPaye,
                    'reste_payer' => max($totalScolarite - $totalPaye, 0),
                    'reduction' => $reduction
                ]
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Erreur lors du chargement des données: ' . $e->getMessage()
            ], 500);
        }
    }

    public function storePaiement(Request $request)
    {
        $request->validate([
            'eleve_id' => 'required|exists:eleves,id',
            'annee_scolaire_id' => 'required|exists:annee_scolaires,id',
            'type_frais_id' => 'required|exists:type_frais,id',
            'montant' => 'required|numeric|min:1',
            'date_paiement' => 'required|date',
            'mode_paiement' => 'required|in:especes,cheque,virement,mobile_money',
            'mois_id' => 'nullable|exists:mois_scolaires,id'
        ]);

        DB::beginTransaction();

        try {
            $paiement = new Paiement();
            $paiement->eleve_id = $request->eleve_id;
            $paiement->annee_scolaire_id = $request->annee_scolaire_id;
            $paiement->type_frais_id = $request->type_frais_id;
            $paiement->mois_id = $request->mois_id;
            $paiement->montant = $request->montant;
            $paiement->date_paiement = $request->date_paiement;
            $paiement->mode_paiement = $request->mode_paiement;
            $paiement->remarques = $request->remarques;
            $paiement->save();

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Paiement enregistré avec succès'
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Erreur lors de l\'enregistrement: ' . $e->getMessage()
            ], 500);
        }
    }

    public function applyReduction(Request $request)
    {
        $request->validate([
            'eleve_id' => 'required|exists:eleves,id',
            'annee_scolaire_id' => 'required|exists:annee_scolaires,id',
            'reduction' => 'required|numeric|min:0'
        ]);

        DB::beginTransaction();

        try {
            $eleve = Eleve::findOrFail($request->eleve_id);
            
            // Supprimer les anciennes réductions pour cette année
            $eleve->reductions()->where('annee_scolaire_id', $request->annee_scolaire_id)->delete();
            
            // Ajouter la nouvelle réduction si > 0
            if ($request->reduction > 0) {
                $eleve->reductions()->create([
                    'annee_scolaire_id' => $request->annee_scolaire_id,
                    'montant' => $request->reduction,
                    'raison' => 'Réduction manuelle'
                ]);
            }

            DB::commit();

            return response()->json([
                'success' => true,
                'message' => 'Réduction appliquée avec succès'
            ]);

        } catch (\Exception $e) {
            DB::rollBack();
            return response()->json([
                'success' => false,
                'message' => 'Erreur lors de l\'application de la réduction: ' . $e->getMessage()
            ], 500);
        }
    }

    public function printScolarite($eleveId, $anneeId)
    {
        $eleve = Eleve::with('classe.niveau')->findOrFail($eleveId);
        $anneeScolaire = AnneeScolaire::findOrFail($anneeId);
        
        // Logique similaire à getElevePaiements pour récupérer les données
        // ...
        
        return view('scolarite.print', compact('eleve', 'anneeScolaire', 'paiementsData', 'summary'));
    }

    public function generateReceipt($eleveId, $typeFraisId, $anneeId, $moisId = null)
    {
        $eleve = Eleve::with('classe.niveau')->findOrFail($eleveId);
        $typeFrais = TypeFrais::findOrFail($typeFraisId);
        $anneeScolaire = AnneeScolaire::findOrFail($anneeId);
        
        $paiements = Paiement::where('eleve_id', $eleveId)
            ->where('type_frais_id', $typeFraisId)
            ->where('annee_scolaire_id', $anneeId);
            
        if ($moisId) {
            $paiements->where('mois_id', $moisId);
            $mois = MoisScolaire::find($moisId);
        } else {
            $mois = null;
        }
        
        $paiements = $paiements->get();
        
        return view('scolarite.receipt', compact('eleve', 'typeFrais', 'anneeScolaire', 'paiements', 'mois'));
    }
}